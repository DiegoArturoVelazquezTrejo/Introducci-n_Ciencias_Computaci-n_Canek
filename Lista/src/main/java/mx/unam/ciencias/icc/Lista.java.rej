--- src/main/java/mx/unam/ciencias/icc/Lista.java
+++ src/main/java/mx/unam/ciencias/icc/Lista.java
@@ -26,7 +26,7 @@ public class Lista {
 
         /* Construye un nodo con un elemento. */
         private Nodo(Object elemento) {
-            // Aquí va su código.
+            this.elemento = elemento;
         }
 
         /**
@@ -34,24 +34,24 @@ public class Lista {
          * @return el nodo anterior del nodo.
          */
         public Nodo getAnterior() {
-            // Aquí va su código.
+            return anterior;
         }
 
         /**
          * Regresa el nodo siguiente del nodo.
          * @return el nodo siguiente del nodo.
          */
-        public Nodo getSiguiente() {
-            // Aquí va su código.
-        }
+         public Nodo getSiguiente() {
+             return siguiente;
+         }
 
-        /**
-         * Regresa el elemento del nodo.
-         * @return el elemento del nodo.
-         */
-        public Object get() {
-            // Aquí va su código.
-        }
+         /**
+          * Regresa el elemento del nodo.
+          * @return el elemento del nodo.
+          */
+         public Object get() {
+             return elemento;
+         }
     }
 
     /* Primer elemento de la lista. */
@@ -66,7 +66,7 @@ public class Lista {
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
-        // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -75,7 +75,7 @@ public class Lista {
      *         otro caso.
      */
     public boolean esVacia() {
-        // Aquí va su código.
+        return longitud == 0;
     }
 
     /**
@@ -85,7 +85,20 @@ public class Lista {
      *                 si es distinto de <code>null</code>.
      */
     public void agregaFinal(Object elemento) {
-        // Aquí va su código.
+        if(elemento == null) return;
+        Nodo nodo = new Nodo(elemento);
+        if(esVacia()){
+            cabeza = nodo;
+            rabo = cabeza;
+            cabeza.anterior = null;
+            rabo.siguiente = null;
+          }
+          else{
+            nodo.anterior = rabo;
+            rabo.siguiente = nodo;
+            rabo = nodo;
+          }
+          longitud++;
     }
 
     /**
@@ -95,7 +108,15 @@ public class Lista {
      *                 si es distinto de <code>null</code>.
      */
     public void agregaInicio(Object elemento) {
-        // Aquí va su código.
+        if(elemento == null) return;
+        Nodo nodo = new Nodo(elemento);
+        if(esVacia()) cabeza = rabo = nodo;
+        else{
+          nodo.siguiente = cabeza;
+          cabeza.anterior = nodo;
+          cabeza = nodo;
+        }
+        longitud++;
     }
 
     /**
@@ -113,7 +134,20 @@ public class Lista {
      *                 si es distinto de <code>null</code>.
      */
     public void inserta(int i, Object elemento) {
-        // Aquí va su código.
+        if(elemento == null) return;
+        else if(i <= 0) agregaInicio(elemento);
+        else if(longitud <= i) agregaFinal(elemento);
+        else{
+
+          Nodo nodo = buscaNodo(get(i));
+          Nodo nuevoNodo = new Nodo(elemento);
+
+          nodo.anterior.siguiente = nuevoNodo;
+          nuevoNodo.anterior = nodo.anterior;
+          nodo.anterior = nuevoNodo;
+          nuevoNodo.siguiente = nodo;
+          longitud++;
+        }
     }
 
     /**
@@ -122,7 +156,7 @@ public class Lista {
      * @param elemento el elemento a eliminar.
      */
     public void elimina(Object elemento) {
-        // Aquí va su código.
+        eliminaNodo(buscaNodo(elemento));
     }
 
     /**
@@ -131,7 +165,15 @@ public class Lista {
      *         <code>null</code> si la lista es vacía.
      */
     public Object eliminaPrimero() {
-        // Aquí va su código.
+        if(esVacia()) return null;
+        Nodo eliminado = cabeza;
+        if(longitud == 1) limpia();
+        else{
+          cabeza = cabeza.siguiente;
+          cabeza.anterior = null;
+          longitud--;
+        }
+        return eliminado.elemento;
     }
 
     /**
@@ -140,7 +182,15 @@ public class Lista {
      *         <code>null</code> si la lista es vacía.
      */
     public Object eliminaUltimo() {
-        // Aquí va su código.
+        if(esVacia()) return null;
+        Nodo eliminado = rabo;
+        if(longitud == 1) limpia();
+        else{
+          rabo = rabo.anterior;
+          rabo.siguiente = null;
+          longitud--;
+        }
+        return eliminado.elemento;
     }
 
     /**
@@ -150,7 +200,7 @@ public class Lista {
      *         <tt>false</tt> en otro caso.
      */
     public boolean contiene(Object elemento) {
-        // Aquí va su código.
+        return buscaNodo(elemento) != null;
     }
 
     /**
@@ -158,7 +208,13 @@ public class Lista {
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
     public Lista reversa() {
-        // Aquí va su código.
+        Lista lista = new Lista();
+        Nodo nodo = rabo;
+        while(nodo != null){
+          lista.agregaFinal(nodo.elemento);
+          nodo = nodo.anterior;
+        }
+        return lista;
     }
 
     /**
@@ -167,14 +223,22 @@ public class Lista {
      * @return una copiad de la lista.
      */
     public Lista copia() {
-        // Aquí va su código.
+        Nodo nodo = cabeza;
+        Lista copiaLista = new Lista();
+        if(esVacia()) return copiaLista;
+        while(nodo != null){
+          copiaLista.agregaFinal(nodo.elemento);
+          nodo = nodo.siguiente;
+        }
+        return copiaLista;
     }
 
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     public void limpia() {
-        // Aquí va su código.
+        cabeza = rabo = null;
+        longitud = 0;
     }
 
     /**
@@ -183,7 +247,7 @@ public class Lista {
      *         es vacía.
      */
     public Object getPrimero() {
-        // Aquí va su código.
+        return (longitud != 0) ? cabeza.elemento : null;
     }
 
     /**
@@ -192,7 +256,7 @@ public class Lista {
      *         es vacía.
      */
     public Object getUltimo() {
-        // Aquí va su código.
+        return (longitud != 0) ? rabo.elemento : null;
     }
 
     /**
@@ -203,7 +267,12 @@ public class Lista {
      *         elementos en la lista.
      */
     public Object get(int i) {
-        // Aquí va su código.
+        if(i < 0 || i >= longitud) return null;
+        Nodo n = cabeza;
+        while(i-- > 0){
+          n = n.siguiente;
+        }
+        return n.elemento;
     }
 
     /**
@@ -213,7 +282,14 @@ public class Lista {
      *         no está contenido en la lista.
      */
     public int indiceDe(Object elemento) {
-        return indiceDe(elemento, cabeza, 0);
+        Nodo n = cabeza;
+        int indice = 0;
+        while( n != null){
+          if(n.elemento.equals(elemento)) return indice;
+          n = n.siguiente;
+          indice++;
+        }
+        return -1;
     }
 
     /**
@@ -221,7 +297,12 @@ public class Lista {
      * @return una representación en cadena de la lista.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        if(esVacia()) return "[]";
+        String s = "[";
+        for (int i = 0; i < longitud-1; i++)
+            s += String.format("%s, ", get(i));
+        s += String.format("%s]", get(longitud-1));
+        return s;
     }
 
     /**
@@ -230,11 +311,20 @@ public class Lista {
      * @return <tt>true</tt> si la lista es igual al objeto recibido;
      *         <tt>false</tt> en otro caso.
      */
-    @Override public boolean equals(Object objeto) {
-        if (!(objeto instanceof Lista))
-            return false;
-        Lista lista = (Lista)objeto;
-        // Aquí va su código.
+    @Override public boolean equals(Object object) {
+        if( !(object instanceof Lista)) return false; 
+        Lista lista = (Lista) object;
+        if(lista == null) return false;
+        else if( lista.getLongitud() != longitud) return false;
+        else if(lista.getLongitud() == 0 && longitud == 0) return true;
+        Nodo nodo = cabeza;
+        int i = 0;
+        while(nodo != null){
+          if(nodo.elemento.equals(lista.get(i)) == false) return false;
+          nodo = nodo.siguiente;
+          i++;
+        }
+        return true;
     }
 
     /**
@@ -242,7 +332,7 @@ public class Lista {
      * @return el nodo cabeza de la lista.
      */
     public Nodo getCabeza() {
-        // Aquí va su código.
+        return cabeza;
     }
 
     /**
@@ -250,6 +340,36 @@ public class Lista {
      * @return el nodo rabo de la lista.
      */
     public Nodo getRabo() {
-        // Aquí va su código.
+        return rabo;
+    }
+
+    /**
+    * Método de bucaNodo que te regresa el nodo en donde se ubica el estudiante.
+    *
+    **/
+    private Nodo buscaNodo(Object e){
+      Nodo n = cabeza;
+      if(e == null) return null;
+      while(n != null){
+        if(n.elemento.equals(e)) return n;
+        n = n.siguiente;
+      }
+      return null;
     }
+    /**
+    * Este metodo eliminará el nodo de acuerdo con elemento que se ingrese.
+    **/
+    private void eliminaNodo(Nodo n){
+       if(n == null) return;
+       else if(longitud == 1 && cabeza.elemento.equals(n.elemento))limpia();
+       else if(buscaNodo(n.elemento) == null) return;
+       else if(n.equals(rabo)) eliminaUltimo();
+       else if(n.equals(cabeza)) eliminaPrimero();
+       else{
+         n.anterior.siguiente = n.siguiente;
+         n.siguiente.anterior = n.anterior;
+         longitud--;
+       }
+    }
+
 }
