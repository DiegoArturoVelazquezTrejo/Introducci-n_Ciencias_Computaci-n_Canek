diff --git a/src/main/java/mx/unam/ciencias/icc/BaseDeDatos.java b/src/main/java/mx/unam/ciencias/icc/BaseDeDatos.java
index b367945..faaf475 100644
--- a/src/main/java/mx/unam/ciencias/icc/BaseDeDatos.java
+++ b/src/main/java/mx/unam/ciencias/icc/BaseDeDatos.java
@@ -11,7 +11,7 @@ import java.io.IOException;
  * registros.
  *
  * Las clases que extiendan a BaseDeDatos deben implementar el método {@link
- * #creaRegistro}, que crea un registro en blanco. 
+ * #creaRegistro}, que crea un registro en blanco.
  */
 public abstract class BaseDeDatos {
 
@@ -22,7 +22,7 @@ public abstract class BaseDeDatos {
      * Constructor único.
      */
     public BaseDeDatos() {
-        // Aquí va su código.
+        registros = new Lista();
     }
 
     /**
@@ -30,7 +30,7 @@ public abstract class BaseDeDatos {
      * @return el número de registros en la base de datos.
      */
     public int getNumRegistros() {
-        // Aquí va su código.
+        return registros.getLongitud();
     }
 
     /**
@@ -39,7 +39,7 @@ public abstract class BaseDeDatos {
      * @return una lista con los registros en la base de datos.
      */
     public Lista getRegistros() {
-        // Aquí va su código.
+        return registros.copia();
     }
 
     /**
@@ -47,7 +47,7 @@ public abstract class BaseDeDatos {
      * @param registro el registro que hay que agregar a la base de datos.
      */
     public void agregaRegistro(Registro registro) {
-        // Aquí va su código.
+        registros.agregaFinal(registro);
     }
 
     /**
@@ -55,22 +55,27 @@ public abstract class BaseDeDatos {
      * @param registro el registro que hay que eliminar de la base de datos.
      */
     public void eliminaRegistro(Registro registro) {
-        // Aquí va su código.
+        registros.elimina(registro);
     }
 
     /**
      * Limpia la base de datos.
      */
     public void limpia() {
-        // Aquí va su código.
-        
+        registros.limpia();
+    }
     /**
      * Guarda todos los registros en la base de datos en la salida recibida.
      * @param out la salida donde hay que guardar los registos.
      * @throws IOException si ocurre un error de entrada/salida.
      */
     public void guarda(BufferedWriter out) throws IOException {
-        // Aquí va su código.
+        Lista.Nodo n = registros.getCabeza();
+        while(n!= null){
+          Registro r = (Registro) n.get();
+          r.guarda(out);
+          n = n.getSiguiente();
+        }
     }
 
     /**
@@ -81,7 +86,12 @@ public abstract class BaseDeDatos {
      * @throws IOException si ocurre un error de entrada/salida.
      */
     public void carga(BufferedReader in) throws IOException {
-        // Aquí va su código.
+        registros.limpia();
+        Registro r = creaRegistro();
+        while(r.carga(in)){
+          registros.agregaFinal(r);
+          r = creaRegistro();
+        }
     }
 
     /**
@@ -94,7 +104,16 @@ public abstract class BaseDeDatos {
      *         correcta.
      */
     public Lista buscaRegistros(Enum campo, Object valor) {
-        // Aquí va su código.
+        if(!(campo instanceof CampoEstudiante))
+            throw new IllegalArgumentException();
+        Lista l = new Lista();
+        Lista.Nodo n = registros.getCabeza();
+        while(n != null){
+          Registro r = (Registro) n.get();
+          if(r.caza(campo, valor))l.agregaFinal(r);
+          n = n.getSiguiente();
+        }
+        return l;
     }
 
     /**
diff --git a/src/main/java/mx/unam/ciencias/icc/BaseDeDatosEstudiantes.java b/src/main/java/mx/unam/ciencias/icc/BaseDeDatosEstudiantes.java
index 921ac5b..b25011e 100644
--- a/src/main/java/mx/unam/ciencias/icc/BaseDeDatosEstudiantes.java
+++ b/src/main/java/mx/unam/ciencias/icc/BaseDeDatosEstudiantes.java
@@ -10,6 +10,6 @@ public class BaseDeDatosEstudiantes extends BaseDeDatos {
      * @return un estudiante en blanco.
      */
     @Override public Registro creaRegistro() {
-        // Aquí va su código.
+        return  new Estudiante(); 
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/icc/CampoEstudiante.java b/src/main/java/mx/unam/ciencias/icc/CampoEstudiante.java
index 4a8740d..9782269 100644
--- a/src/main/java/mx/unam/ciencias/icc/CampoEstudiante.java
+++ b/src/main/java/mx/unam/ciencias/icc/CampoEstudiante.java
@@ -20,6 +20,12 @@ public enum CampoEstudiante {
      * @return una representación en cadena del campo.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        switch(this){
+          case NOMBRE: return "Nombre";
+          case CUENTA: return "# Cuenta";
+          case PROMEDIO : return "Promedio";
+          case EDAD: return "Edad";
+          default: throw new IllegalArgumentException(); 
+        }
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/icc/Estudiante.java b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
index 6a52fff..cc78447 100644
--- a/src/main/java/mx/unam/ciencias/icc/Estudiante.java
+++ b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
@@ -12,117 +12,129 @@ import java.io.IOException;
  * respectivamente, además de determinar si sus campos cazan valores
  * arbitrarios.
  */
-public class Estudiante implements Registro {
-
-    /* Nombre del estudiante. */
-    private String nombre;
-    /* Número de cuenta. */
-    private int cuenta;
-    /* Pormedio del estudiante. */
-    private double promedio;
-    /* Edad del estudiante.*/
-    private int edad;
-
-    /**
-     * Define el estado inicial de un estudiante.
-     * @param nombre el nombre del estudiante.
-     * @param cuenta el número de cuenta del estudiante.
-     * @param promedio el promedio del estudiante.
-     * @param edad la edad del estudiante.
-     */
-    public Estudiante(String nombre,
-                      int    cuenta,
-                      double promedio,
-                      int    edad) {
-        // Aquí va su código.
-    }
-
-    /**
-     * Regresa el nombre del estudiante.
-     * @return el nombre del estudiante.
-     */
-    public String getNombre() {
-        // Aquí va su código.
-    }
-
-    /**
-     * Define el nombre del estudiante.
-     * @param nombre el nuevo nombre del estudiante.
-     */
-    public void setNombre(String nombre) {
-        // Aquí va su código.
-    }
-
-    /**
-     * Regresa el número de cuenta del estudiante.
-     * @return el número de cuenta del estudiante.
-     */
-    public int getCuenta() {
-        // Aquí va su código.
-    }
-
-    /**
-     * Define el número cuenta del estudiante.
-     * @param cuenta el nuevo número de cuenta del estudiante.
-     */
-    public void setCuenta(int cuenta) {
-        // Aquí va su código.
-    }
-
-    /**
-     * Regresa el promedio del estudiante.
-     * @return el promedio del estudiante.
-     */
-    public double getPromedio() {
-        // Aquí va su código.
-    }
-
-    /**
-     * Define el promedio del estudiante.
-     * @param promedio el nuevo promedio del estudiante.
-     */
-    public void setPromedio(double promedio) {
-        // Aquí va su código.
-    }
-
-    /**
-     * Regresa la edad del estudiante.
-     * @return la edad del estudiante.
-     */
-    public int getEdad() {
-        // Aquí va su código.
-    }
-
-    /**
-     * Define la edad del estudiante.
-     * @param edad la nueva edad del estudiante.
-     */
-    public void setEdad(int edad) {
-        // Aquí va su código.
-    }
-
-    /**
-     * Regresa una representación en cadena del estudiante.
-     * @return una representación en cadena del estudiante.
-     */
-    @Override public String toString() {
-        // Aquí va su código.
-    }
-
-    /**
-     * Nos dice si el objeto recibido es un estudiante igual al que manda llamar
-     * el método.
-     * @param objeto el objeto con el que el estudiante se comparará.
-     * @return <tt>true</tt> si el objeto recibido es un estudiante con las
-     *         mismas propiedades que el objeto que manda llamar al método,
-     *         <tt>false</tt> en otro caso.
-     */
-    @Override public boolean equals(Object objeto) {
-        if (!(objeto instanceof Estudiante))
-            return false;
-        Estudiante estudiante = (Estudiante)objeto;
-        // Aquí va su código.
-    }
+ public class Estudiante extends Object implements Registro{
+
+     /* Nombre del estudiante. */
+     private String nombre;
+     /* Número de cuenta. */
+     private int cuenta;
+     /* Pormedio del estudiante. */
+     private double promedio;
+     /* Edad del estudiante.*/
+     private int edad;
+
+     /**
+      * Define el estado inicial de un estudiante.
+      * @param nombre el nombre del estudiante.
+      * @param cuenta el número de cuenta del estudiante.
+      * @param promedio el promedio del estudiante.
+      * @param edad la edad del estudiante.
+      */
+     public Estudiante(String nombre,
+                       int    cuenta,
+                       double promedio,
+                       int    edad) {
+         this.nombre    = nombre;
+         this.cuenta = cuenta;
+         this.promedio = promedio;
+         this.edad = edad;
+         // Aquí va su código.
+     }
+     public Estudiante(){}
+     /**
+      * Regresa el nombre del estudiante.
+      * @return el nombre del estudiante.
+      */
+     public String getNombre() {
+         return nombre;
+     }
+
+     /**
+      * Define el nombre del estudiante.
+      * @param nombre el nuevo nombre del estudiante.
+      */
+     public void setNombre(String nombre) {
+         this.nombre = nombre;
+     }
+
+     /**
+      * Regresa el número de cuenta del estudiante.
+      * @return el número de cuenta del estudiante.
+      */
+     public int getCuenta() {
+         return cuenta;
+     }
+
+     /**
+      * Define el número cuenta del estudiante.
+      * @param cuenta el nuevo número de cuenta del estudiante.
+      */
+     public void setCuenta(int cuenta) {
+         this.cuenta = cuenta;
+     }
+
+     /**
+      * Regresa el promedio del estudiante.
+      * @return el promedio del estudiante.
+      */
+     public double getPromedio() {
+         return promedio;
+     }
+
+     /**
+      * Define el promedio del estudiante.
+      * @param promedio el nuevo promedio del estudiante.
+      */
+     public void setPromedio(double promedio) {
+        this.promedio = promedio;
+     }
+
+     /**
+      * Regresa la edad del estudiante.
+      * @return la edad del estudiante.
+      */
+     public int getEdad() {
+         return edad;
+     }
+
+     /**
+      * Define la edad del estudiante.
+      * @param edad la nueva edad del estudiante.
+      */
+     public void setEdad(int edad) {
+         this.edad = edad;
+     }
+
+     /**
+      * Regresa una representación en cadena del estudiante.
+      * @return una representación en cadena del estudiante.
+      */
+     public String toString() {
+       String cadena = String.format("Nombre   : %s\n" +
+                       "Cuenta   : %09d\n" +
+                       "Promedio : %2.2f\n" +
+                       "Edad     : %d",
+               nombre, cuenta, promedio, edad);
+       return cadena;
+     }
+
+     /**
+      * Nos dice si el estudiante recibido es igual al que manda llamar el
+      * método.
+      * @param estudiante el estudiante con el cual comparar.
+      * @return <tt>true</tt> si el estudiante recibido tiene las mismas
+      *         propiedades que el estudiante que manda llamar al método,
+      *         <tt>false</tt> en otro caso.
+      */
+     @Override
+     public boolean equals(Object objeto) {
+         if(!(objeto instanceof Estudiante)) return false;
+         Estudiante estudiante = (Estudiante) objeto;
+         if(estudiante == null) return false; 
+         if(this.nombre.equals(estudiante.nombre) && this.cuenta == estudiante.cuenta && this.promedio == estudiante.promedio && this.edad == estudiante.edad)
+            return true;
+         return false;
+     }
 
     /**
      * Guarda al estudiante en la salida recibida.
@@ -130,7 +142,7 @@ public class Estudiante implements Registro {
      * @throws IOException si un error de entrada/salida ocurre.
      */
     @Override public void guarda(BufferedWriter out) throws IOException {
-        // Aquí va su código.
+        out.write(String.format("%s\t%d\t%2.2f\t%d\n",nombre,cuenta,promedio,edad));
     }
 
     /**
@@ -142,7 +154,21 @@ public class Estudiante implements Registro {
      *         recibida no contiene a un estudiante.
      */
     @Override public boolean carga(BufferedReader in) throws IOException {
-        // Aquí va su código.
+        String l = in.readLine();
+        if(l == null) return false;
+        l = l.trim();
+        if(l.equals(""))return false;
+        String [] t = l.split("\t");
+        if(t.length != 4) throw new IOException("Numero de campos inválido");
+        nombre = t[0];
+        try{
+          cuenta = Integer.parseInt(t[1]);
+          promedio = Double.parseDouble(t[2]);
+          edad = Integer.parseInt(t[3]);
+        }catch(NumberFormatException nfe){
+          throw new IOException("Datos inválidos");
+        }
+        return true;
     }
 
     /**
@@ -176,6 +202,38 @@ public class Estudiante implements Registro {
             throw new IllegalArgumentException("El campo debe ser " +
                                                "CampoEstudiante");
         CampoEstudiante c = (CampoEstudiante)campo;
-        // Aquí va su código.
+        switch(c){
+          case NOMBRE:
+            return cazaNombre(valor);
+          case CUENTA:
+            return cazaCuenta(valor);
+          case EDAD:
+            return cazaEdad(valor);
+          case PROMEDIO:
+            return cazaPromedio(valor);
+          default:
+            return false;
+        }
+    }
+    private boolean cazaNombre(Object o){
+      if(!(o instanceof String))return false;
+      String v = (String) o;
+      if(v.isEmpty()) return false;
+      return nombre.indexOf(v) !=-1;
+    }
+    private boolean cazaCuenta(Object o){
+      if(!(o instanceof Integer)) return false;
+      Integer v = (Integer) o;
+      return cuenta>= v.intValue();
+    }
+    private boolean cazaEdad(Object o){
+      if(!(o instanceof Integer)) return false;
+      Integer v = (Integer) o;
+      return edad>= v.intValue();
+    }
+    private boolean cazaPromedio(Object o){
+      if(!(o instanceof Double)) return false;
+      Double v = (Double) o;
+      return promedio>= v.doubleValue();
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/icc/Lista.java b/src/main/java/mx/unam/ciencias/icc/Lista.java
index 5ae6e1e..a04b7d9 100644
--- a/src/main/java/mx/unam/ciencias/icc/Lista.java
+++ b/src/main/java/mx/unam/ciencias/icc/Lista.java
@@ -1,5 +1,4 @@
 package mx.unam.ciencias.icc;
-
 import java.util.NoSuchElementException;
 
 /**
@@ -28,7 +27,7 @@ public class Lista {
 
         /* Construye un nodo con un elemento. */
         private Nodo(Object elemento) {
-            // Aquí va su código.
+            this.elemento = elemento;
         }
 
         /**
@@ -36,24 +35,24 @@ public class Lista {
          * @return el nodo anterior del nodo.
          */
         public Nodo getAnterior() {
-            // Aquí va su código.
+            return anterior;
         }
 
         /**
          * Regresa el nodo siguiente del nodo.
          * @return el nodo siguiente del nodo.
          */
-        public Nodo getSiguiente() {
-            // Aquí va su código.
-        }
+         public Nodo getSiguiente() {
+             return siguiente;
+         }
 
-        /**
-         * Regresa el elemento del nodo.
-         * @return el elemento del nodo.
-         */
-        public Object get() {
-            // Aquí va su código.
-        }
+         /**
+          * Regresa el elemento del nodo.
+          * @return el elemento del nodo.
+          */
+         public Object get() {
+             return elemento;
+         }
     }
 
     /* Primer elemento de la lista. */
@@ -68,7 +67,7 @@ public class Lista {
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
-        // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -77,7 +76,7 @@ public class Lista {
      *         otro caso.
      */
     public boolean esVacia() {
-        // Aquí va su código.
+        return longitud == 0;
     }
 
     /**
@@ -88,7 +87,20 @@ public class Lista {
      *         <code>null</code>.
      */
     public void agregaFinal(Object elemento) {
-        // Aquí va su código.
+        if(elemento == null) throw new IllegalArgumentException("Elemento null");
+        Nodo nodo = new Nodo(elemento);
+        if(esVacia()){
+            cabeza = nodo;
+            rabo = cabeza;
+            cabeza.anterior = null;
+            rabo.siguiente = null;
+          }
+          else{
+            nodo.anterior = rabo;
+            rabo.siguiente = nodo;
+            rabo = nodo;
+          }
+          longitud++;
     }
 
     /**
@@ -99,7 +111,15 @@ public class Lista {
      *         <code>null</code>.
      */
     public void agregaInicio(Object elemento) {
-        // Aquí va su código.
+        if(elemento == null) throw new IllegalArgumentException("Elemento null");
+        Nodo nodo = new Nodo(elemento);
+        if(esVacia()) cabeza = rabo = nodo;
+        else{
+          nodo.siguiente = cabeza;
+          cabeza.anterior = nodo;
+          cabeza = nodo;
+        }
+        longitud++;
     }
 
     /**
@@ -118,7 +138,20 @@ public class Lista {
      *         <code>null</code>.
      */
     public void inserta(int i, Object elemento) {
-        // Aquí va su código.
+        if(elemento == null) throw new IllegalArgumentException("Elemento null");
+        else if(i <= 0) agregaInicio(elemento);
+        else if(longitud <= i) agregaFinal(elemento);
+        else{
+
+          Nodo nodo = buscaNodo(get(i));
+          Nodo nuevoNodo = new Nodo(elemento);
+
+          nodo.anterior.siguiente = nuevoNodo;
+          nuevoNodo.anterior = nodo.anterior;
+          nodo.anterior = nuevoNodo;
+          nuevoNodo.siguiente = nodo;
+          longitud++;
+        }
     }
 
     /**
@@ -127,7 +160,7 @@ public class Lista {
      * @param elemento el elemento a eliminar.
      */
     public void elimina(Object elemento) {
-        // Aquí va su código.
+        eliminaNodo(buscaNodo(elemento));
     }
 
     /**
@@ -136,7 +169,15 @@ public class Lista {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public Object eliminaPrimero() {
-        // Aquí va su código.
+        if(esVacia())  throw new NoSuchElementException("Lista Vacía");
+        Nodo eliminado = cabeza;
+        if(longitud == 1) limpia();
+        else{
+          cabeza = cabeza.siguiente;
+          cabeza.anterior = null;
+          longitud--;
+        }
+        return eliminado.elemento;
     }
 
     /**
@@ -145,7 +186,15 @@ public class Lista {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public Object eliminaUltimo() {
-        // Aquí va su código.
+        if(esVacia()) throw new NoSuchElementException("Lista Vacía");
+        Nodo eliminado = rabo;
+        if(longitud == 1) limpia();
+        else{
+          rabo = rabo.anterior;
+          rabo.siguiente = null;
+          longitud--;
+        }
+        return eliminado.elemento;
     }
 
     /**
@@ -155,7 +204,7 @@ public class Lista {
      *         <tt>false</tt> en otro caso.
      */
     public boolean contiene(Object elemento) {
-        // Aquí va su código.
+        return buscaNodo(elemento) != null;
     }
 
     /**
@@ -163,7 +212,13 @@ public class Lista {
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
     public Lista reversa() {
-        // Aquí va su código.
+        Lista lista = new Lista();
+        Nodo nodo = rabo;
+        while(nodo != null){
+          lista.agregaFinal(nodo.elemento);
+          nodo = nodo.anterior;
+        }
+        return lista;
     }
 
     /**
@@ -172,14 +227,22 @@ public class Lista {
      * @return una copiad de la lista.
      */
     public Lista copia() {
-        // Aquí va su código.
+        Nodo nodo = cabeza;
+        Lista copiaLista = new Lista();
+        if(esVacia()) return copiaLista;
+        while(nodo != null){
+          copiaLista.agregaFinal(nodo.elemento);
+          nodo = nodo.siguiente;
+        }
+        return copiaLista;
     }
 
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     public void limpia() {
-        // Aquí va su código.
+        cabeza = rabo = null;
+        longitud = 0;
     }
 
     /**
@@ -188,7 +251,8 @@ public class Lista {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public Object getPrimero() {
-        // Aquí va su código.
+        if(longitud != 0) return cabeza.elemento;
+        else throw new NoSuchElementException("Lista vacía");
     }
 
     /**
@@ -197,18 +261,23 @@ public class Lista {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public Object getUltimo() {
-        // Aquí va su código.
+        if(longitud != 0) return rabo.elemento;
+        else throw new NoSuchElementException("Lista vacía");
     }
 
-    /**
-     * Regresa el <em>i</em>-ésimo elemento de la lista.
+    /** Regresa el <em>i</em>-ésimo elemento de la lista.
      * @param i el índice del elemento que queremos.
      * @return el <em>i</em>-ésimo elemento de la lista.
      * @throws ExcepcionIndiceInvalido si <em>i</em> es menor que cero o mayor o
      *         igual que el número de elementos en la lista.
      */
     public Object get(int i) {
-        // Aquí va su código.
+        if(i < 0 || i >= longitud) throw new ExcepcionIndiceInvalido("Índice inválido");
+        Nodo n = cabeza;
+        while(i-- > 0){
+          n = n.siguiente;
+        }
+        return n.elemento;
     }
 
     /**
@@ -218,7 +287,14 @@ public class Lista {
      *         no está contenido en la lista.
      */
     public int indiceDe(Object elemento) {
-        // Aquí va su código.
+        Nodo n = cabeza;
+        int indice = 0;
+        while( n != null){
+          if(n.elemento.equals(elemento)) return indice;
+          n = n.siguiente;
+          indice++;
+        }
+        return -1;
     }
 
     /**
@@ -226,7 +302,12 @@ public class Lista {
      * @return una representación en cadena de la lista.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        if(esVacia()) return "[]";
+        String s = "[";
+        for (int i = 0; i < longitud-1; i++)
+            s += String.format("%s, ", get(i));
+        s += String.format("%s]", get(longitud-1));
+        return s;
     }
 
     /**
@@ -235,11 +316,20 @@ public class Lista {
      * @return <tt>true</tt> si la lista es igual al objeto recibido;
      *         <tt>false</tt> en otro caso.
      */
-    @Override public boolean equals(Object objeto) {
-        if (!(objeto instanceof Lista))
-            return false;
-        Lista lista = (Lista)objeto;
-        // Aquí va su código.
+    @Override public boolean equals(Object object) {
+        if( !(object instanceof Lista)) return false;
+        Lista lista = (Lista) object;
+        if(lista == null) return false;
+        else if( lista.getLongitud() != longitud) return false;
+        else if(lista.getLongitud() == 0 && longitud == 0) return true;
+        Nodo nodo = cabeza;
+        int i = 0;
+        while(nodo != null){
+          if(nodo.elemento.equals(lista.get(i)) == false) return false;
+          nodo = nodo.siguiente;
+          i++;
+        }
+        return true;
     }
 
     /**
@@ -247,7 +337,7 @@ public class Lista {
      * @return el nodo cabeza de la lista.
      */
     public Nodo getCabeza() {
-        // Aquí va su código.
+        return cabeza;
     }
 
     /**
@@ -255,6 +345,36 @@ public class Lista {
      * @return el nodo rabo de la lista.
      */
     public Nodo getRabo() {
-        // Aquí va su código.
+        return rabo;
     }
+
+    /**
+    * Método de bucaNodo que te regresa el nodo en donde se ubica el estudiante.
+    *
+    **/
+    private Nodo buscaNodo(Object e){
+      Nodo n = cabeza;
+      if(e == null) return null;
+      while(n != null){
+        if(n.elemento.equals(e)) return n;
+        n = n.siguiente;
+      }
+      return null;
+    }
+    /**
+    * Este metodo eliminará el nodo de acuerdo con elemento que se ingrese.
+    **/
+    private void eliminaNodo(Nodo n){
+       if(n == null) return;
+       else if(longitud == 1 && cabeza.elemento.equals(n.elemento))limpia();
+       else if(buscaNodo(n.elemento) == null) return;
+       else if(n.equals(rabo)) eliminaUltimo();
+       else if(n.equals(cabeza)) eliminaPrimero();
+       else{
+         n.anterior.siguiente = n.siguiente;
+         n.siguiente.anterior = n.anterior;
+         longitud--;
+       }
+    }
+
 }
diff --git a/src/test/java/mx/unam/ciencias/icc/test/TestBaseDeDatosEstudiantes.java b/src/test/java/mx/unam/ciencias/icc/test/TestBaseDeDatosEstudiantes.java
index c521ef0..4698f58 100644
--- a/src/test/java/mx/unam/ciencias/icc/test/TestBaseDeDatosEstudiantes.java
+++ b/src/test/java/mx/unam/ciencias/icc/test/TestBaseDeDatosEstudiantes.java
@@ -114,7 +114,7 @@ public class TestBaseDeDatosEstudiantes {
      * Prueba unitaria para {@link BaseDeDatos#eliminaRegistro}.
      */
     @Test public void testEliminaRegistro() {
-        int ini = random.nextInt(1000000);
+        int ini = random.nextInt(1000);
         for (int i = 0; i < total; i++) {
             Estudiante e = TestEstudiante.estudianteAleatorio(ini + i);
             bdd.agregaRegistro(e);
@@ -184,7 +184,7 @@ public class TestBaseDeDatosEstudiantes {
      * Prueba unitaria para {@link BaseDeDatos#carga}.
      */
     @Test public void testCarga() {
-        int ini = random.nextInt(1000000);
+        int ini = random.nextInt(100);
         String entrada = "";
         Estudiante[] estudiantes = new Estudiante[total];
         for (int i = 0; i < total; i++) {
